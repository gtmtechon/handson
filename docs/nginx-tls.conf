server {
    listen 80; # HTTP 포트 (선택 사항: HTTPS로 리디렉션)
    server_name iotmonweb.koreacentral.cloudapp.azure.com, localhost,20.196.104.117; 
    return 301 https://$host$request_uri; # HTTP 요청을 HTTPS로 자동 리디렉션
}

server {
    listen 443 ssl; # HTTPS 기본 포트
    server_name iotmonweb.koreacentral.cloudapp.azure.com, localhost,20.196.104.117;

    # SSL 인증서 및 개인 키 파일 경로 지정
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    # SSL 프로토콜 및 암호화 스위트 설정 (보안 강화)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;


    set $cors_origin "https://iotdevicemonitor-h6h8bpepcme4dee2.koreacentral-01.azurewebsites.net";

    # Preflight 요청 (OPTIONS 메서드) 처리
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' "$cors_origin";
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization'; # Vue.js에서 사용하는 모든 헤더 포함
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
    }

    # 실제 요청에 대한 CORS 헤더
    add_header 'Access-Control-Allow-Origin' "$cors_origin";
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range'; # 클라이언트가 읽을 응답 헤더가 있다면 추가
    # --- CORS 설정 끝 ---

    location / {
        # 백엔드 Spring Boot 서버로 요청 프록시
        # 백엔드 서버가 8080 포트에서 HTTP로 실행되고 있다면 그대로 유지
        proxy_passproxy_pass http://20.0.1.4:8080;; # 또는 http://127.0.0.1:8080; 또는 Spring Boot 서버의 내부 IP
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # Nginx가 HTTPS 요청을 받았음을 백엔드에 알림
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade"; # 웹소켓 지원을 위해 필요할 수 있음
    }
}